AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provisions sample resources for Develop with AWS.'
Metadata: {}
Parameters: {}
Mappings: {}
Conditions: {}
Resources:
  DevelopWithAwsDemoBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  DevelopWithAwsDemoRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      # KLUDGE: Oddly RepositoryName is required, even though it prevents ephemeral resources per stack, hence the custom naming.
      RepositoryName: !Sub 
        - 'develop-with-aws-demo-${UniqueId}'
        - UniqueId: !Select [2, !Split ['/', !Ref AWS::StackId]]
      RepositoryDescription: This is a demo repository to explore Develop with AWS features.
      Code:
        BranchName: main
        S3: 
          Bucket: code.eu-central-1.utoolity.net
          Key: aws/cloudformation/code/develop-with-aws-samples-main.zip
          # ObjectVersion: 1
  DevelopWithAwsDemoEventsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: events-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DevelopWithAwsDemoPipeline}" 
  DevelopWithAwsDemoPipelineEventsRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !GetAtt DevelopWithAwsDemoRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        -
          Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DevelopWithAwsDemoPipeline}"
          RoleArn: !GetAtt DevelopWithAwsDemoEventsServiceRole.Arn
          Id: codepipeline-DevelopWithAwsDemoPipeline
  DevelopWithAwsDemoCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  DevelopWithAwsDemoCodePipelineServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      # KLUDGE: Oddly PolicyName is required, even though it prevents ephemeral resources per stack, hence the custom naming.
      PolicyName: !Sub 
        - 'develop-with-aws-demo-pipeline-${UniqueId}'
        - UniqueId: !Select [2, !Split ['/', !Ref AWS::StackId]]
      PolicyDocument: # TODO: Scope this default service role policy down to actually used resources and actions!
        Statement:
        - Action: [
            "iam:PassRole"
          ]
          Resource: "*"
          Effect: Allow
          Condition:
            StringEqualsIfExists:
              "iam:PassedToService": [
                "cloudformation.amazonaws.com",
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "ecs-tasks.amazonaws.com"
              ]
        # - Action: [
        #     "codestar-connections:UseConnection"
        #   ]
        #   Resource: "*"
        #   Effect: Allow
        - Action: "s3:*"
        # - Action: [
        #     "s3:GetObject",
        #     "s3:GetObjectVersion",
        #     "s3:GetBucketVersioning",
        #     "s3:PutObject"
        #   ]
          # Resource: !GetAtt DevelopWithAwsDemoBucket.Arn
          Resource: "*"
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:ValidateTemplate"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "codebuild:BatchGetBuildBatches",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "codebuild:StartBuildBatches",
          ]
          Resource: "*"
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "codedeploy:CreateDeployment",
            "codedeploy:GetApplication",
            "codedeploy:GetApplicationRevision",
            "codedeploy:GetDeployment",
            "codedeploy:GetDeploymentConfig",
            "codedeploy:RegisterApplicationRevision"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "autoscaling:*",
            "cloudwatch:*",
            "ec2:*",
            "ecs:*",
            "elasticbeanstalk:*",
            "elasticloadbalancing:*",
            "sns:*",
            "sqs:*",
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "lambda:InvokeFunction",
            "lambda:ListFunctions"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "states:DescribeExecution",
            "states:DescribeStateMachine",
            "states:StartExecution"
          ]
          Resource: "*"
          Effect: Allow
      Roles: [!Ref DevelopWithAwsDemoCodePipelineServiceRole]
  DevelopWithAwsDemoPipeline: 
    Type: AWS::CodePipeline::Pipeline 
    Properties: 
      RoleArn:
        !GetAtt DevelopWithAwsDemoCodePipelineServiceRole.Arn
      Stages: 
        - 
          Name: Source 
          Actions: 
            - 
              Name: SourceAction
              ActionTypeId: 
                Category: Source 
                Owner: AWS 
                Provider: CodeCommit 
                Version: '1'
              OutputArtifacts: 
                - 
                  Name: SourceArtifact 
              Configuration: 
                RepositoryName: 
                  !GetAtt 'DevelopWithAwsDemoRepository.Name'
                BranchName: 'main'
                PollForSourceChanges: false
              RunOrder: 1
        - 
          Name: Deploy
          Actions:
            # TODO: Enable approval once multiple samples are supported
            # - 
            #   Name: ManualApproval
            #   ActionTypeId: 
            #     Category: Approval 
            #     Owner: AWS 
            #     Provider: Manual 
            #     Version: '1'
            #   RunOrder: 1
            - 
              Name: DeployAction
              InputArtifacts: 
                - 
                  Name: SourceArtifact 
              ActionTypeId: 
                Category: Deploy 
                Owner: AWS 
                Provider: S3 
                Version: '1'
              Configuration: 
                BucketName: 
                  Ref: DevelopWithAwsDemoBucket
                Extract: true
              RunOrder: 2
      ArtifactStore: 
        Type: S3 
        Location:
          Ref: DevelopWithAwsDemoBucket 
      Tags:
        - Key: utoolity:atlassian:devops:environment:type
          Value: development
Outputs: {}
