AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provisions sample resources for Develop with AWS.'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: CodePipeline configuration
      Parameters:
      - IncludeApproval
    ParameterLabels:
      IncludeApproval:
        default: Include manual approval action
Parameters:
  IncludeApproval:
    Type: String
    Description: Choose Include to add a manual approval action for continous delivery, or Skip to continuously deploy.
    AllowedValues:
      - Include
      - Skip
    Default: Skip
Conditions:
  IncludeApproval: !Equals 
    - !Ref IncludeApproval
    - Include
Mappings: {}
Resources:
  DevelopWithAwsDemoBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  DevelopWithAwsDemoRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      # KLUDGE: Oddly RepositoryName is required, even though it prevents ephemeral resources per stack, hence the custom naming.
      RepositoryName: !Sub 
        - 'develop-with-aws-demo-${UniqueId}'
        - UniqueId: !Select [2, !Split ['/', !Ref AWS::StackId]]
      RepositoryDescription: A demo repository to explore Develop with AWS features.
      Code:
        BranchName: main
        S3: 
          Bucket: code.eu-central-1.utoolity.net
          Key: aws/cloudformation/code/develop-with-aws-samples-main.zip
          # ObjectVersion: 1
  DevelopWithAwsDemoCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  DevelopWithAwsDemoCodeBuildServiceRoleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants permissions to explore CodeBuild related Develop with AWS features.
      PolicyDocument: # TODO: Scope this default service role policy down to actually used resources and actions!
        Version: "2012-10-17"
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Effect: Allow
          Resource:
          - !Sub ${DevelopWithAwsDemoBucket.Arn}/*
        - Action:
          - codecommit:GitPull
          Effect: Allow
          Resource:
          - !GetAtt DevelopWithAwsDemoRepository.Arn
      Roles: [!Ref DevelopWithAwsDemoCodeBuildServiceRole]
  DevelopWithAwsDemoBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: A demo project to explore Develop with AWS features.
      ServiceRole: !GetAtt DevelopWithAwsDemoCodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
      LogsConfig:
        CloudWatchLogs:
            GroupName: !Sub
              - "/aws/vendedlogs/states/DevelopWithAwsDemoBuildProjectLogGroup-${UniqueId}"
              - UniqueId: !Select [2, !Split ['/', !Ref AWS::StackId]]
            Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - echo Installing something...
              finally:
                - echo This always runs even if the install command fails 
            pre_build:
              commands:
                - echo Preprocessing build...
                - mkdir target
              finally:
                - echo This always runs even if the pre_build command fails 
            build:
              commands:
                - echo Building something...
                - echo Build started on `date`
                - echo Build started on `date` >target/artifact.txt
              finally:
                - echo This always runs even if the build command fails
            post_build:
              commands:
                - echo Postprocessing build...
                - echo Build completed on `date`
                - echo Build completed on `date` >>target/artifact.txt
          artifacts:
            files:
              - target/artifact.txt
            discard-paths: yes
      TimeoutInMinutes: 8
      Tags:
        - Key: utoolity:atlassian:devops:environment:type
          Value: development
        - Key: utoolity:atlassian:devops:provider:type
          Value: build
  DevelopWithAwsDemoEventsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: events-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DevelopWithAwsDemoPipeline}" 
  DevelopWithAwsDemoPipelineEventsRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !GetAtt DevelopWithAwsDemoRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - main
      Targets:
        -
          Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${DevelopWithAwsDemoPipeline}"
          RoleArn: !GetAtt DevelopWithAwsDemoEventsServiceRole.Arn
          Id: codepipeline-DevelopWithAwsDemoPipeline
  DevelopWithAwsDemoCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  DevelopWithAwsDemoCodePipelineServiceRoleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants permissions to explore CodePipeline related Develop with AWS features.
      PolicyDocument: # TODO: Scope this default service role policy down to actually used resources and actions!
        Version: "2012-10-17"
        Statement:
        - Action: [
            "iam:PassRole"
          ]
          Resource: "*"
          Effect: Allow
          Condition:
            StringEqualsIfExists:
              "iam:PassedToService": [
                "cloudformation.amazonaws.com",
                "elasticbeanstalk.amazonaws.com",
                "ec2.amazonaws.com",
                "ecs-tasks.amazonaws.com"
              ]
        # - Action: [
        #     "codestar-connections:UseConnection"
        #   ]
        #   Resource: "*"
        #   Effect: Allow
        - Action: [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
          ]
          Resource: !Sub ${DevelopWithAwsDemoBucket.Arn}/*
          Effect: Allow
        - Action: [
            "s3:GetBucketVersioning",
          ]
          Resource: !Sub ${DevelopWithAwsDemoBucket.Arn}
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:ValidateTemplate"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "codebuild:BatchGetBuildBatches",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "codebuild:StartBuildBatches",
          ]
          Resource: "*"
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [  # TODO: scope down to actually used resources and actions!
            "codedeploy:CreateDeployment",
            "codedeploy:GetApplication",
            "codedeploy:GetApplicationRevision",
            "codedeploy:GetDeployment",
            "codedeploy:GetDeploymentConfig",
            "codedeploy:RegisterApplicationRevision"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "autoscaling:*",
            "cloudwatch:*",
            "ec2:*",
            "ecs:*",
            "elasticbeanstalk:*",
            "elasticloadbalancing:*",
            "sns:*",
            "sqs:*",
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "lambda:InvokeFunction",
            "lambda:ListFunctions"
          ]
          Resource: "*"
          Effect: Allow
        - Action: [
            "states:DescribeExecution",
            "states:DescribeStateMachine",
            "states:StartExecution"
          ]
          Resource: "*"
          Effect: Allow
      Roles: [!Ref DevelopWithAwsDemoCodePipelineServiceRole]
  DevelopWithAwsDemoPipeline: 
    Type: AWS::CodePipeline::Pipeline 
    Properties: 
      RoleArn:
        !GetAtt DevelopWithAwsDemoCodePipelineServiceRole.Arn
      Stages: 
        - Name: Source 
          Actions: 
            - Name: CheckoutCode
              ActionTypeId: 
                Category: Source 
                Owner: AWS 
                Provider: CodeCommit 
                Version: '1'
              OutputArtifacts: 
                - Name: SourceArtifact 
              Configuration: 
                RepositoryName: 
                  !GetAtt 'DevelopWithAwsDemoRepository.Name'
                BranchName: 'main'
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions: 
            - Name: BuildArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref DevelopWithAwsDemoBuildProject
                PrimarySource: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - !If
              - IncludeApproval
              - Name: ApproveDeployment
                ActionTypeId: 
                  Category: Approval 
                  Owner: AWS 
                  Provider: Manual 
                  Version: '1'
                RunOrder: 1
              - !Ref AWS::NoValue 
            - Name: DeployArtifact 
              ActionTypeId: 
                Category: Deploy 
                Owner: AWS 
                Provider: S3 
                Version: '1'
              Configuration: 
                BucketName: 
                  Ref: DevelopWithAwsDemoBucket
                Extract: true
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 2
      ArtifactStore: 
        Type: S3 
        Location:
          Ref: DevelopWithAwsDemoBucket 
      Tags:
        - Key: utoolity:atlassian:devops:environment:type
          Value: development
Outputs: {}
